(setq edgesOnboard 0)
(defun count-edges(array x y)
     (setq xlim (array-dimension array 0) ylim (array-dimension array 1) edges 0)
     ;lefty if y is zero then as is or y-1
     (setq leftx x lefty y rightx x righty y topx x topy y downx x downy y)
     (if(> y 0) (decf lefty))
     (if(> x 0) (decf topx))
     (if(< x (- xlim 1)) (incf downx))
     (if(< y (- ylim 1)) (incf righty))
     (if(equal (aref array leftx   lefty   ) #\|) (incf edges))
     (if(equal (aref array rightx  righty  ) #\|) (incf edges))
     (if(equal (aref array topx    topy    ) #\-) (incf edges))
     (if(equal (aref array downx   downy   ) #\-) (incf edges))
     (return-from count-edges edges) )

(defun verify-loop(array list)
  ;(print "in verify loop")
     (setq xlim (array-dimension array 0) ylim (array-dimension array 1) edgesOnboard 0)
  (loop for i below (array-dimension array 0)
        :do (loop for j below (array-dimension array 1)
                  :do ( when (and (= (mod i 2) 1) (= (mod j 2) 1) (not (equal (aref array i j) #\Space))) (setq num (count-edges array i j)) (if(not (equal (aref array i j) num))(return-from verify-loop NIL)) )))
   ;(format "Edges on board ~3D list-length " edgesOnboard ) 
   ;(if(equal edgesOnboard (list-length list)) (return-from verify-loop T)(return-from verify-loop NIL))
  ;(loop for i below (array-dimension array 0)
        ;:do (loop for j below (array-dimension array 1)
                  ;:do ( when (or (equal (aref array i j) #\-) (equal (aref array i j) #\|))(incf edgesOnboard) )))
   ;(print "=====")
   ;(print edgesOnboard)
   ;(print (list-length list))
   ;(if(equal edgesOnboard (list-length list)) (return-from verify-loop T)(return-from verify-loop NIL)))

   (return-from verify-loop T))
     ;(loop for i below xlim
         ;:do (print i) (loop for j below ylim
             ;:do (when (and (= (mod i 2) 1) (= (mod j 2) 1) (not (equal (aref array i j) #\Space)))
                       ;(if(not (equal (aref array i j) (count-edges array i j))) (return-from verify-loop NIL)))))
     ;(return-from verify-loop T))

(defun check-if-visited(list1 list2)
     (loop for i below (list-length list2)
         :do (if(equal list1 (nth i list2)) (return-from check-if-visited T)))
     (return-from check-if-visited NIL))
