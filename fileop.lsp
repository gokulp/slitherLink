
(setq edgeCount 0)
(setq xstart 0 ystart 0)
;(defun print-board (array)
;  (print (array-dimension array 0))
;  (loop for i below (array-dimension array 0)
;        :do (loop for j below (array-dimension array 1)
;                  :do (princ (aref array i j)))
;                      (terpri)))

(defun make-grid (strings file-name)  
    (setf xdim (+ 1 (* 2 (list-length strings))))
    (setf ydim (+ 1 (* 2 (list-length strings))))
    ;(setq xdim (digit-char-p xdim))
    ;(setq ydim (digit-char-p ydim))
    (setq board (make-array (list xdim ydim)))
    (dotimes (m xdim)
        (dotimes (n ydim)
            (if (/= 0 (mod m 2))
                (setf (aref board m n) #\Space)
                (progn
                        (if (= 0 (mod n 2))
                        (setf (aref board m n) '+)
                        (setf (aref board m n) #\Space))))))
    (setq fp (open file-name))
    (dotimes (m xdim)
    (dotimes (n ydim)
        (when (and (/= 0 (mod m 2)) (/= 0 (mod n 2)))
            (when (char= #\NewLine (peek-char nil fp)) (setq temp (read-char fp)))
            (if (char= #\Space (peek-char nil fp)) (setq tmp (read-char fp)) (setq tmp (digit-char-p (read-char fp)))) 
            (setf (aref board m n) tmp))))
    (apply-constraints board)
    (inception board)
    (terpri)
    (print "Final Board solution")
    (format t "started at ~3D ~3D" xstart ystart)
    (solve-board board)
    (terpri)
    (print-board board)
)

(defun solve-board(array)
    (setq lst '())
    ;(setq xstart 0 ystart 2)
    (if(cont-existing-path board xstart ystart lst) (print "solution found") (print "Couldn't find Solution! :("))
    (print "moves made in solution")
    (print lst)
)

(defun apply-constraints(array)
    (print-board array)
    (check-and-add-constraints array)
    (check-and-add-constraints array)
    (check-and-add-constraints array)
    (check-and-add-constraints array)
    (try-advancing-edge array)
    (check-and-add-constraints array)
    (check-and-add-constraints array)
    (try-advancing-edge array)
    (check-and-add-constraints array)
    (check-and-add-constraints array)
    (try-advancing-edge array)
    (check-and-add-constraints array)
    (check-and-add-constraints array)
    (try-advancing-edge array)
    (terpri)
    (print "Board after certain constraint application")
    (format t "min number of edges ~3D" (minNumEdges array))
    (setq minNumEdges 10)
    (terpri)
    (print-board array)) 

(defun apply-move-on-board(array x y dir)
    (cond ((equal (aref array x y) #\Space)
           (cond ((equal dir 't) (setq x (- x 1))(setf (aref array x y) #\|))
                 ((equal dir 'd) (setq x (+ x 1))(setf (aref array x y) #\|))
                 ((equal dir 'l) (setq y (- y 1))(setf (aref array x y) #\-))
                 ((equal dir 'r) (setq y (+ y 1))(setf (aref array x y) #\-))))
          ((equal (aref array x y) #\x)
           (cond ((equal dir 't) (setq x (- x 1))(setf (aref array x y) #\Space))
                 ((equal dir 'd) (setq x (+ x 1))(setf (aref array x y) #\Space))
                 ((equal dir 'l) (setq y (- y 1))(setf (aref array x y) #\Space))
                 ((equal dir 'r) (setq y (+ y 1))(setf (aref array x y) #\Space))))
          (T
           (cond ((equal dir 't) (setq x (- x 1))(setf (aref array x y) #\|))
                 ((equal dir 'd) (setq x (+ x 1))(setf (aref array x y) #\|))
                 ((equal dir 'l) (setq y (- y 1))(setf (aref array x y) #\-))
                 ((equal dir 'r) (setq y (+ y 1))(setf (aref array x y) #\-)))))
    (print "after applying move")
    (print-board array))
 
(defun read-file (filename)
        (with-open-file (stream filename)
                (loop for line = (read-line stream nil nil)
                while line
                collecting line into lines
                finally (return lines))))
            

(defun input-board (name-file)
        (make-grid (read-file name-file) name-file))

(defun inception(array)
    (setq ptlist '())
    (loop for i to 4
       :do (setf ptlist (getStart array (- 4 i))) (if(/= (list-length ptlist) 0) (return)))
    (print "Starting point")(print ptlist)
    (if(/= (list-length ptlist) 0)(setq xstart (nth 0 ptlist) ystart (nth 1 ptlist)) )
    (cond ((equal (aref array (- xstart 1) ystart) #\-) (setq xstart (- xstart 1) ystart (- ystart 1)))
    ((equal (aref array (+ xstart 1) ystart) #\-) (setq xstart (+ xstart 1) ystart (+ ystart 1)))
    ((equal (aref array xstart (+ ystart 1)) #\|) (setq xstart (+ xstart 1) ystart (+ ystart 1)))
    ((equal (aref array xstart (- ystart 1)) #\|) (setq xstart (+ xstart 1) ystart (- ystart 1)))))

(defun getStart(array num ) 
    (if(equal num #\Space) (return-from getStart NIL))
    (print "in getstart")(print num)
    (loop for i below (array-dimension array 0)
        :do (loop for j below (array-dimension array 1)
            :do (when (and (= (mod i 2) 1) (= (mod j 2) 1)) (if(equal (count-edges array i j) num) (return-from getStart (list i j))))))
    (return-from getStart NIL))

(defun minNumEdges(array) 
    (setq edgeCount 0)
    (loop for i below (array-dimension array 0)
        :do (loop for j below (array-dimension array 1)
            :do (when (and (= (mod i 2) 1) (= (mod j 2) 1) (not (equal (aref array i j) #\Space)) ) (setf edgeCount (+ edgeCount (aref array i j))))))
    (return-from minNumEdges edgeCount))
