(defun vborder(array)
      (setq j 0 k (- (array-dimension array 1) 1) xlim (array-dimension array 0) ylim (array-dimension array 1))
      (loop for i from 1 to (- xlim 1)
          :do  (when(and (< i (- xlim 2)) (equal (aref array i j) #\|) (equal (aref array (+ i 1) (+ j 1)) #\-))
                    (setf (aref array (+ i 2) j) #\x)) 
               (when(and (> i 2) (equal (aref array i j) #\|) (equal (aref array (- i 1) (+ j 1)) #\-))
                    (setf (aref array (- i 2) j) #\x)) 
               (when(and (> i 2) (equal (aref array i j) #\|) (equal (aref array (- i 2) j) #\|))
                    (setf (aref array (- i 1) (+ j 1)) #\x)) 
               (when(and (< i (- xlim 2)) (equal (aref array i j) #\|) (equal (aref array (+ i 2) j) #\|))
                    (setf (aref array (+ i 1) (+ j 1)) #\x)) 
               (when(and (> i 2) (equal (aref array i k) #\|) (equal (aref array (- i 2) k) #\|))
                    (setf (aref array (- i 1) (- k 1)) #\x)) 
               (when(and (< i (- xlim 2)) (equal (aref array i k) #\|) (equal (aref array (+ i 2) k) #\|))
                    (setf (aref array (+ i 1) (- k 1)) #\x)) 
               (when(and (< i (- xlim 2)) (equal (aref array i k) #\|) (equal (aref array (+ i 1) (- k 1)) #\-))
                    (setf (aref array (+ i 2) k) #\x)) 
               (when(and (> i 2) (equal (aref array i k) #\|) (equal (aref array (- i 1) (- k 1)) #\-))
                    (setf (aref array (- i 2) k) #\x))))

(defun hborder(array)
      (setq i1 0 i2 (- (array-dimension array 0) 1) xlim (array-dimension array 0) ylim (array-dimension array 1))
      (loop for j from 1 to (- ylim 1)
          :do 
               (when(and (> j 2) (equal (aref array i1 j) #\-) (equal (aref array (+ i1 1) (- j 1)) #\|))
                    (setf (aref array i1 (- j 2)) #\x)) 
               (when(and (< j (- ylim 2)) (equal (aref array i1 j) #\-) (equal (aref array (+ i1 1) (+ j 1)) #\|))
                    (setf (aref array i1 (+ j 2)) #\x)) 
               (when(and (< j (- ylim 2)) (equal (aref array i1 j) #\-) (equal (aref array i1 (+ j 2)) #\-))
                    (setf (aref array (+ i1 1) (+ j 1)) #\x)) 
               (when(and (> j 2) (equal (aref array i1 j) #\-) (equal (aref array i1 (- j 2)) #\-))
                    (setf (aref array (+ i1 1) (- j 1)) #\x)) 
               (when(and (> j 2) (equal (aref array i2 j) #\-) (equal (aref array i2 (- j 2)) #\-))
                    (setf (aref array (- i2 1) (- j 1)) #\x)) 
               (when(and (< j (- ylim 2)) (equal (aref array i2 j) #\-) (equal (aref array i2 (+ j 2)) #\-))
                    (setf (aref array (- i2 1) (+ j 1)) #\x)) 
               (when(and (> j 2) (equal (aref array i2 j) #\-) (equal (aref array (- i2 1) (- j 1)) #\|))
                    (setf (aref array i2 (- j 2)) #\x)) 
               (when(and (< j (- ylim 2)) (equal (aref array i2 j) #\-) (equal (aref array (- i2 1) (+ j 1)) #\|))
                    (setf (aref array i2 (+ j 2)) #\x))))
