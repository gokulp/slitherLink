(defun try-advancing-edge(array)
    (setq xlim (array-dimension array 0) ylim (array-dimension array 1))
    (setq flag 0);consider we are not going to get anything - programmers are always pessimistic toward centainities.
    (loop for i below xlim
         :do (loop for j below ylim
                  :do (advance array i j))))

(defun advance(array i j)
    (when (equal (aref array i j) #\-) 
          ;(print "horizontal row section")
          ;(print (aref array i j))
	  (when(can-be-advanced-hleft  array i j) (setq flag 1) (advanced-hedge array (+ i 0) (- j 2)))
	  (when(can-be-advanced-hright array i j) (setq flag 1) (advanced-hedge array (+ i 0) (+ j 2)))
	  (when(can-be-advanced-ltop   array i j) (setq flag 1) (advanced-vedge array (- i 1) (+ j 1)))
	  (when(can-be-advanced-rtop   array i j) (setq flag 1) (advanced-vedge array (- i 1) (- j 1)))
	  (when(can-be-advanced-ldown  array i j) (setq flag 1) (advanced-vedge array (+ i 1) (+ j 1)))
	  (when(can-be-advanced-rdown  array i j) (setq flag 1) (advanced-vedge array (+ i 1) (- j 1))))
    (when (equal (aref array i j) #\|) 
	  (when(can-be-advanced-tleft  array i j) (setq flag 1) (advanced-hedge array (+ i 1) (- j 1)))
	  (when(can-be-advanced-dleft  array i j) (setq flag 1) (advanced-hedge array (- i 1) (- j 1)))
	  (when(can-be-advanced-tright array i j) (setq flag 1) (advanced-hedge array (+ i 1) (+ j 1)))
	  (when(can-be-advanced-dright array i j) (setq flag 1) (advanced-hedge array (- i 1) (+ j 1)))
	  (when(can-be-advanced-vtop   array i j) (setq flag 1) (advanced-vedge array (- i 2) (+ j 0)))
	  (when(can-be-advanced-vdown  array i j) (setq flag 1) (advanced-vedge array (+ i 2) (+ j 0)))))

(defun advanced-hedge(array x y)
    (setf (aref array x y) #\-)
    (advance array x y))

(defun advanced-vedge(array x y)
    (setf (aref array x y) #\|)
    (advance array x y))

(defun can-be-advanced-hleft(array x y)
    ;(print "hleft")(print x)(print y)(print (aref array x y))
    (setq xlim (array-dimension array 0) ylim (array-dimension array 1))
    (if(or (equal y 1) (not (equal (aref array x (- y 2)) #\Space))) (return-from can-be-advanced-hleft NIL))
    (if(and (equal x 0) (equal x (- xlim 1))) (return-from can-be-advanced-hleft T)) 
    (if(and (> x 0) (< x (- xlim 1))) 
       (if(and (equal (aref array (+ x 1) (- y 1)) #\x) (equal (aref array (- x 1) (- y 1)) #\x)) (return-from can-be-advanced-hleft T)))
    (if(equal x 0) 
       (if(equal (aref array (+ x 1) (- y 1)) #\x) (return-from can-be-advanced-hleft T)))
    (if(equal x (- xlim 1)) 
       (if(equal (aref array (- x 1) (- y 1)) #\x) (return-from can-be-advanced-hleft T)))
    (return-from can-be-advanced-hleft NIL))

(defun can-be-advanced-tleft(array x y)
    ;(print "tleft")(print x)(print y)(print (aref array x y))
    (setq xlim (array-dimension array 0) ylim (array-dimension array 1))
    (if(or (equal y 0) (not (equal (aref array (+ x 1) (- y 1)) #\Space))) (return-from can-be-advanced-tleft NIL))
    (if(and (= y (- ylim 1)) (= x (- xlim 2))) (return-from can-be-advanced-tleft T))
    (if(and (< y (- ylim 1)) (< x (- xlim 2))) 
       (if(and (equal (aref array (+ x 1) (+ y 1)) #\x) (equal (aref array (+ x 2) y) #\x)) (return-from can-be-advanced-tleft T)))
    (if(equal y (- ylim 1)) 
       (if(equal (aref array (+ x 2) y) #\x) (return-from can-be-advanced-tleft T)))
    (if(equal x (- xlim 2)) 
       (if(equal (aref array (+ x 1) (+ y 1)) #\x) (return-from can-be-advanced-tleft T)))
    (return-from can-be-advanced-tleft NIL))

(defun can-be-advanced-dleft(array x y)
    (setq xlim (array-dimension array 0) ylim (array-dimension array 1))
    (if(or (equal y 0) (not (equal (aref array (- x 1) (- y 1)) #\Space))) (return-from can-be-advanced-dleft NIL))
    (if(and (= x 1) (= y (- ylim 1))) (return-from can-be-advanced-dleft T))
    (if(and (> x 1) (< y (- ylim 1))) 
       (if(and (equal (aref array (- x 1) (+ y 1)) #\x) (equal (aref array (- x 2) y) #\x)) (return-from can-be-advanced-dleft T)))
    (if(equal y (- ylim 1)) 
       (if(equal (aref array (- x 2) y) #\x) (return-from can-be-advanced-dleft T)))
    (if(equal x 1) 
       (if(equal (aref array (- x 1) (+ y 1)) #\x) (return-from can-be-advanced-dleft T))) 
    (return-from can-be-advanced-dleft NIL))

(defun can-be-advanced-hright (array x y)
    (setq xlim (array-dimension array 0) ylim (array-dimension array 1))
    (if(or (equal y (- ylim 2)) (not (equal (aref array x (+ y 2)) #\Space))) (return-from can-be-advanced-hright NIL))
    (if(and (= x 0) (= x (- xlim 1))) (return-from can-be-advanced-hright T))
    (if(and (> x 0) (< x (- xlim 1))) 
       (if(and (equal (aref array (+ x 1) (+ y 1)) #\x) (equal (aref array (- x 1) (+ y 1)) #\x)) (return-from can-be-advanced-hright T)))
    (if(equal x 0) 
       (if(equal (aref array (+ x 1) (+ y 1)) #\x) (return-from can-be-advanced-hright T)))
    (if(equal x (- xlim 1)) 
       (if(equal (aref array (- x 1) (+ y 1)) #\x) (return-from can-be-advanced-hright T))) 
    (return-from can-be-advanced-hright NIL))

(defun can-be-advanced-tright(array x y)
    (setq xlim (array-dimension array 0) ylim (array-dimension array 1))
    (if(or (equal y (- ylim 1)) (not (equal (aref array (+ x 1) (+ y 1)) #\Space)) (equal y (- ylim 1))) (return-from can-be-advanced-tright NIL))
    (if(and (= y 0) (= x (- xlim 2))) (return-from can-be-advanced-tright T))
    (if(and (> y 0) (< x (- xlim 2))) 
       (if(and (equal (aref array (+ x 1) (- y 1)) #\x) (equal (aref array (+ x 2) y) #\x)) (return-from can-be-advanced-tright T)))
    (if(equal y 0) 
       (if(equal (aref array (+ x 2) y) #\x) (return-from can-be-advanced-tright T)))
    (if(equal x (- xlim 2)) 
       (if(equal (aref array (+ x 1) (- y 1)) #\x) (return-from can-be-advanced-tright T))) 
    (return-from can-be-advanced-tright NIL))

(defun can-be-advanced-dright(array x y)
    (setq xlim (array-dimension array 0) ylim (array-dimension array 1))
    (if(or (equal y (- ylim 1)) (not (equal (aref array (- x 1) (+ y 1)) #\Space))) (return-from can-be-advanced-dright NIL))
    (if(and (= x 1) (= y 0)) (return-from can-be-advanced-dright T))
    (if(and (> x 1) (> y 0)) 
       (if(and (equal (aref array (- x 1) (- y 1)) #\x) (equal (aref array (- x 2) y) #\x)) (return-from can-be-advanced-dright T)))
    (if(equal y 0) 
       (if(equal (aref array (- x 2) y) #\x) (return-from can-be-advanced-dright T)))
    (if(equal x 1) 
       (if(equal (aref array (- x 1) (- y 1)) #\x) (return-from can-be-advanced-dright T))) 
    (return-from can-be-advanced-dright NIL))

(defun can-be-advanced-vtop(array x y)
    (setq xlim (array-dimension array 0) ylim (array-dimension array 1))
    (if(or (equal x 1) (not (equal (aref array (- x 2) y) #\Space)) (equal x 1)) (return-from can-be-advanced-vtop NIL))
    (if(and (= y 0) (= y (- ylim 1))) (return-from can-be-advanced-vtop T))
    (if(and (> y 0) (< y (- ylim 1))) 
       (if(and (equal (aref array (+ x 1) (+ y 1)) #\x) (equal (aref array (+ x 1) (- y 1)) #\x)) (return-from can-be-advanced-vtop T)))
    (if(equal y 0) 
       (if(equal (aref array (- x 1) (+ y 1)) #\x) (return-from can-be-advanced-vtop T)))
    (if(equal y (- ylim 1)) 
       (if(equal (aref array (- x 1) (- y 1)) #\x) (return-from can-be-advanced-vtop T))) 
    (return-from can-be-advanced-vtop NIL))

(defun can-be-advanced-ltop(array x y)
    (setq xlim (array-dimension array 0) ylim (array-dimension array 1))
    (if(or (equal x 0) (not (equal (aref array (- x 1) (+ y 1)) #\Space)) (equal x 0)) (return-from can-be-advanced-ltop NIL))
    (if(and (equal x (- xlim 1)) (equal y (- ylim 2))) (return-from can-be-advanced-ltop T))
    (if(and (< x (- xlim 1)) (< y (- ylim 2))) 
       (if(and (equal (aref array (+ x 1) (+ y 1)) #\x) (equal (aref array x (+ y 2)) #\x)) (return-from can-be-advanced-ltop T)))
    (if(equal x (- xlim 1)) 
       (if(equal (aref array x (+ y 2)) #\x) (return-from can-be-advanced-ltop T)))
    (if(equal y (- ylim 2)) 
       (if(equal (aref array (+ x 1) (+ y 1)) #\x) (return-from can-be-advanced-ltop T))) 
    (return-from can-be-advanced-ltop NIL))

(defun can-be-advanced-rtop(array x y)
    (setq xlim (array-dimension array 0) ylim (array-dimension array 1))
    (if(or (equal x 0) (not (equal (aref array (- x 1) (- y 1)) #\Space)) (equal x 0)) (return-from can-be-advanced-rtop NIL))
    (if(and (= x (- xlim 1)) (= y 1))  (return-from can-be-advanced-rtop T))
    (if(and (< x (- xlim 1)) (> y 1)) 
       (if(and (equal (aref array (+ x 1) (- y 1)) #\x) (equal (aref array x (- y 2)) #\x)) (return-from can-be-advanced-rtop T)))
    (if(equal x (- xlim 1)) 
       (if(equal (aref array x (- y 2)) #\x) (return-from can-be-advanced-rtop T)))
    (if(equal y 1) 
       (if(equal (aref array (+ x 1) (- y 1)) #\x) (return-from can-be-advanced-rtop T))) 
    (return-from can-be-advanced-rtop NIL))

(defun can-be-advanced-vdown (array x y)
    (setq xlim (array-dimension array 0) ylim (array-dimension array 1))
    (if(or (equal x (- xlim 2)) (not (equal (aref array (+ x 2) y) #\Space)) (equal x (- xlim 2))) (return-from can-be-advanced-vdown NIL))
    (if(and (= y 0) (= y (- ylim 1))) (return-from can-be-advanced-rtop T))
    (if(and (> y 0) (< y (- ylim 1))) 
       (if(and (equal (aref array (+ x 1) (+ y 1)) #\x) (equal (aref array (+ x 1) (- y 1)) #\x)) (return-from can-be-advanced-vdown T)))
    (if(equal y 0) 
       (if(equal (aref array (+ x 1) (+ y 1)) #\x) (return-from can-be-advanced-vdown T)))
    (if(equal y (- ylim 1)) 
       (if(equal (aref array (+ x 1) (- y 1)) #\x) (return-from can-be-advanced-vdown T))) 
    (return-from can-be-advanced-vdown NIL))

(defun can-be-advanced-rdown(array x y)
    (setq xlim (array-dimension array 0) ylim (array-dimension array 1))
    (if(or (equal x (- xlim 1)) (not (equal (aref array (+ x 1) (- y 1)) #\Space)) (equal x (- xlim 1))) (return-from can-be-advanced-rdown NIL))
    (if(and (= y 1) (= x 0)) (return-from can-be-advanced-rdown T))
    (if(and (> y 1) (> x 0)) 
       (if(and (equal (aref array (- x 1) (- y 1)) #\x) (equal (aref array x (- y 2)) #\x)) (return-from can-be-advanced-rdown T)))
    (if(equal x 0) 
       (if(equal (aref array x (- y 2)) #\x) (return-from can-be-advanced-rdown T)))
    (if(equal y 1) 
       (if(equal (aref array (+ x 1) (- y 1)) #\x) (return-from can-be-advanced-rdown T))) 
    (return-from can-be-advanced-rdown NIL))

(defun can-be-advanced-ldown(array x y)
    (setq xlim (array-dimension array 0) ylim (array-dimension array 1))
    (if(or (equal x (- xlim 1)) (not (equal (aref array (+ x 1) (+ y 1)) #\Space)) (equal x (- xlim 1))) (return-from can-be-advanced-ldown NIL))
    (if(and (= y (- ylim 2)) (= x 0)) (return-from can-be-advanced-ldown T))
    (if(and (< y (- ylim 2)) (> x 0)) 
       (if(and (equal (aref array (- x 1) (+ y 1)) #\x) (equal (aref array x (+ y 2)) #\x)) (return-from can-be-advanced-ldown T)))
    (if(equal y (- ylim 2)) 
       (if(equal (aref array (- x 1) (+ y 1)) #\x) (return-from can-be-advanced-ldown T))) 
    (if(equal x 0) 
       (if(equal (aref array x (+ y 2)) #\x) (return-from can-be-advanced-ldown T)))
    (return-from can-be-advanced-ldown NIL))
